<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.core.computation.db.AnalysisReportMapper">
  <sql id="reportColumns">
    <!-- the data report is not brought back by default as it could be too big in memory -->
    ar.id,
    ar.project_key as projectKey,
    ar.report_status as status,
    ar.uuid as uuid,
    ar.created_at as createdAt,
    ar.updated_at as updatedAt,
    ar.started_at as startedAt,
    ar.finished_at as finishedAt
  </sql>

  <insert id="insert" parameterType="AnalysisReport" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
    insert into analysis_reports
    (project_key, uuid, report_status, created_at, updated_at, started_at, finished_at)
    values (
    #{projectKey,jdbcType=VARCHAR}, #{uuid,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR},
    #{createdAt,jdbcType=BIGINT}, #{updatedAt,jdbcType=BIGINT}, #{startedAt,jdbcType=BIGINT},
    #{finishedAt,jdbcType=BIGINT}
    )
  </insert>

  <update id="resetAllToPendingStatus" parameterType="map">
    update analysis_reports
    set report_status='PENDING', updated_at=#{updatedAt,jdbcType=BIGINT}, started_at=NULL
  </update>

  <update id="updateWithBookingReport" parameterType="map">
    update analysis_reports
    set report_status=#{busyStatus,jdbcType=VARCHAR},
    started_at=#{startedAt,jdbcType=BIGINT}
    where id=#{id} and report_status=#{availableStatus}
  </update>

  <delete id="truncate">
    truncate table analysis_reports
  </delete>

  <delete id="delete">
    delete from analysis_reports where id=#{id}
  </delete>

  <select id="selectById" resultType="AnalysisReport">
    select
    <include refid="reportColumns"/>
    from analysis_reports ar
    where id = #{id}
  </select>

  <select id="selectByProjectKey" parameterType="String" resultType="AnalysisReport">
    select
    <include refid="reportColumns"/>
    from analysis_reports ar
    where project_key = #{projectKey}
  </select>

  <!-- TODO optimize by restricting results to first row (LIMIT 1 on most dbs) -->
  <select id="selectAvailables" parameterType="map" resultType="Long">
    select ar.id
    from analysis_reports ar
    where ar.report_status=#{availableStatus}
    and not exists(
    select 1
    from analysis_reports ar2
    where ar.project_key = ar2.project_key
    and ar2.report_status=#{busyStatus}
    )
    order by created_at asc
  </select>

  <select id="selectAll" resultType="AnalysisReport">
    select
    <include refid="reportColumns"/>
    from analysis_reports ar
  </select>
</mapper>
